/* eslint-disable no-restricted-globals */
self.__WB_DISABLE_DEV_LOGS = true;

// 만약 __WB_MANIFEST가 정의되지 않았다면 빈 배열로 초기화
self.__WB_MANIFEST = self.__WB_MANIFEST || [];

// precache 목록에 index.html 수동 추가
self.__WB_MANIFEST.push({ url: '/index.html', revision: '1' });

// Workbox 라이브러리 불러오기
importScripts('https://storage.googleapis.com/workbox-cdn/releases/6.5.4/workbox-sw.js');

if (workbox) {
  console.log('✅ Workbox loaded successfully');

  workbox.core.clientsClaim();

  // Precache all assets generated by the build process.
  workbox.precaching.precacheAndRoute(self.__WB_MANIFEST);

  // Set up App Shell-style routing
  const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
  workbox.routing.registerRoute(
    ({ request, url }) => {
      if (request.mode !== 'navigate') return false;
      if (url.pathname.startsWith('/_')) return false;
      if (url.pathname.match(fileExtensionRegexp)) return false;
      return true;
    },
    workbox.precaching.createHandlerBoundToURL('/index.html')
  );

  // Runtime caching for .png requests
  workbox.routing.registerRoute(
    ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'),
    new workbox.strategies.StaleWhileRevalidate({
      cacheName: 'images',
      plugins: [new workbox.expiration.ExpirationPlugin({ maxEntries: 50 })],
    })
  );

} else {
  console.log('🚨 Workbox failed to load');
}

// 푸시 알림 처리
self.addEventListener('push', (event) => {
  console.log('🚀 Push 이벤트 발생:', event);

  if (!event.data) {
    console.log('⚠️ Push event has no data.');
    return;
  }

  let pushData = null;

  try {
    // JSON 파싱 시도
    pushData = event.data.json();
  } catch (err) {
    // JSON 파싱 실패 시 텍스트로 처리
    console.warn('JSON 파싱 실패, 일반 텍스트로 처리:', err);
    pushData = { title: '알림', body: event.data.text() };
  }

  console.log('📢 푸시 알림 데이터:', pushData);

  const options = {
    body: pushData.body || '새로운 알림이 도착했습니다!',
    icon: pushData.icon || '/icon-192x192.png',
    badge: pushData.badge || '/icon-192x192.png',
    data: pushData.data || {},
    actions: pushData.actions || [],
    vibrate: [200, 100, 200]
  };

  event.waitUntil(
    self.registration.showNotification(pushData.title || '알림', options)
  );
});


// 알림 클릭 처리
self.addEventListener('notificationclick', (event) => {
  event.notification.close();
  
  event.waitUntil(
    clients.matchAll({ type: 'window' }).then(clientList => {
      for (const client of clientList) {
        if (client.url === '/' && 'focus' in client) {
          return client.focus();
        }
      }
      if (clients.openWindow) {
        return clients.openWindow('/');
      }
    })
  );
});

// Service Worker 업데이트 처리
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});
